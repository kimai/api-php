<?php
/**
 * TimesheetApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kimai - API Docs
 *
 * JSON API for the Kimai time-tracking software: [API documentation](https://www.kimai.org/documentation/rest-api.html), [Swagger definition file](doc.json)
 *
 * OpenAPI spec version: 0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * TimesheetApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TimesheetApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiTimesheetsActiveGet
     *
     * Returns the collection of active timesheet records
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TimesheetCollectionExpanded[]
     */
    public function apiTimesheetsActiveGet()
    {
        list($response) = $this->apiTimesheetsActiveGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation apiTimesheetsActiveGetWithHttpInfo
     *
     * Returns the collection of active timesheet records
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TimesheetCollectionExpanded[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTimesheetsActiveGetWithHttpInfo()
    {
        $returnType = '\Swagger\Client\Model\TimesheetCollectionExpanded[]';
        $request = $this->apiTimesheetsActiveGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\TimesheetCollectionExpanded[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiTimesheetsActiveGetAsync
     *
     * Returns the collection of active timesheet records
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTimesheetsActiveGetAsync()
    {
        return $this->apiTimesheetsActiveGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTimesheetsActiveGetAsyncWithHttpInfo
     *
     * Returns the collection of active timesheet records
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTimesheetsActiveGetAsyncWithHttpInfo()
    {
        $returnType = '\Swagger\Client\Model\TimesheetCollectionExpanded[]';
        $request = $this->apiTimesheetsActiveGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTimesheetsActiveGet'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiTimesheetsActiveGetRequest()
    {

        $resourcePath = '/api/timesheets/active';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if ($apiKey !== null) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-USER');
        if ($apiKey !== null) {
            $headers['X-AUTH-USER'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTimesheetsGet
     *
     * Returns a collection of timesheet records
     *
     * @param  string $user User ID to filter timesheets. Needs permission &#39;view_other_timesheet&#39;, pass &#39;all&#39; to fetch data for all user (default: current user) (optional)
     * @param  string $customer DEPRECATED: Customer ID to filter timesheets (will be removed with 2.0) (optional)
     * @param  string $customers Comma separated list of customer IDs to filter timesheets (optional)
     * @param  string $project DEPRECATED: Project ID to filter timesheets (will be removed with 2.0) (optional)
     * @param  string $projects Comma separated list of project IDs to filter timesheets (optional)
     * @param  string $activity DEPRECATED: Activity ID to filter timesheets (will be removed with 2.0) (optional)
     * @param  string $activities Comma separated list of activity IDs to filter timesheets (optional)
     * @param  string $page The page to display, renders a 404 if not found (default: 1) (optional)
     * @param  string $size The amount of entries for each page (default: 50) (optional)
     * @param  string $tags Comma separated list of tag names (optional)
     * @param  string $order_by The field by which results will be ordered. Allowed values: id, begin, end, rate (default: begin) (optional)
     * @param  string $order The result order. Allowed values: ASC, DESC (default: DESC) (optional)
     * @param  string $begin Only records after this date will be included (format: HTML5) (optional)
     * @param  string $end Only records before this date will be included (format: HTML5) (optional)
     * @param  string $exported Use this flag if you want to filter for export state. Allowed values: 0&#x3D;not exported, 1&#x3D;exported (default: all) (optional)
     * @param  string $active Filter for running/active records. Allowed values: 0&#x3D;stopped, 1&#x3D;active (default: all) (optional)
     * @param  string $billable Filter for non-/billable records. Allowed values: 0&#x3D;non-billable, 1&#x3D;billable (default: all) (optional)
     * @param  string $full Allows to fetch fully serialized objects including subresources. Allowed values: true (default: false) (optional)
     * @param  string $term Free search term (optional)
     * @param  string $modified_after Only records changed after this date will be included (format: HTML5). Available since Kimai 1.10 and works only for records that were created/updated since then. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TimesheetCollection[]
     */
    public function apiTimesheetsGet($user = null, $customer = null, $customers = null, $project = null, $projects = null, $activity = null, $activities = null, $page = null, $size = null, $tags = null, $order_by = null, $order = null, $begin = null, $end = null, $exported = null, $active = null, $billable = null, $full = null, $term = null, $modified_after = null)
    {
        list($response) = $this->apiTimesheetsGetWithHttpInfo($user, $customer, $customers, $project, $projects, $activity, $activities, $page, $size, $tags, $order_by, $order, $begin, $end, $exported, $active, $billable, $full, $term, $modified_after);
        return $response;
    }

    /**
     * Operation apiTimesheetsGetWithHttpInfo
     *
     * Returns a collection of timesheet records
     *
     * @param  string $user User ID to filter timesheets. Needs permission &#39;view_other_timesheet&#39;, pass &#39;all&#39; to fetch data for all user (default: current user) (optional)
     * @param  string $customer DEPRECATED: Customer ID to filter timesheets (will be removed with 2.0) (optional)
     * @param  string $customers Comma separated list of customer IDs to filter timesheets (optional)
     * @param  string $project DEPRECATED: Project ID to filter timesheets (will be removed with 2.0) (optional)
     * @param  string $projects Comma separated list of project IDs to filter timesheets (optional)
     * @param  string $activity DEPRECATED: Activity ID to filter timesheets (will be removed with 2.0) (optional)
     * @param  string $activities Comma separated list of activity IDs to filter timesheets (optional)
     * @param  string $page The page to display, renders a 404 if not found (default: 1) (optional)
     * @param  string $size The amount of entries for each page (default: 50) (optional)
     * @param  string $tags Comma separated list of tag names (optional)
     * @param  string $order_by The field by which results will be ordered. Allowed values: id, begin, end, rate (default: begin) (optional)
     * @param  string $order The result order. Allowed values: ASC, DESC (default: DESC) (optional)
     * @param  string $begin Only records after this date will be included (format: HTML5) (optional)
     * @param  string $end Only records before this date will be included (format: HTML5) (optional)
     * @param  string $exported Use this flag if you want to filter for export state. Allowed values: 0&#x3D;not exported, 1&#x3D;exported (default: all) (optional)
     * @param  string $active Filter for running/active records. Allowed values: 0&#x3D;stopped, 1&#x3D;active (default: all) (optional)
     * @param  string $billable Filter for non-/billable records. Allowed values: 0&#x3D;non-billable, 1&#x3D;billable (default: all) (optional)
     * @param  string $full Allows to fetch fully serialized objects including subresources. Allowed values: true (default: false) (optional)
     * @param  string $term Free search term (optional)
     * @param  string $modified_after Only records changed after this date will be included (format: HTML5). Available since Kimai 1.10 and works only for records that were created/updated since then. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TimesheetCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTimesheetsGetWithHttpInfo($user = null, $customer = null, $customers = null, $project = null, $projects = null, $activity = null, $activities = null, $page = null, $size = null, $tags = null, $order_by = null, $order = null, $begin = null, $end = null, $exported = null, $active = null, $billable = null, $full = null, $term = null, $modified_after = null)
    {
        $returnType = '\Swagger\Client\Model\TimesheetCollection[]';
        $request = $this->apiTimesheetsGetRequest($user, $customer, $customers, $project, $projects, $activity, $activities, $page, $size, $tags, $order_by, $order, $begin, $end, $exported, $active, $billable, $full, $term, $modified_after);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\TimesheetCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiTimesheetsGetAsync
     *
     * Returns a collection of timesheet records
     *
     * @param  string $user User ID to filter timesheets. Needs permission &#39;view_other_timesheet&#39;, pass &#39;all&#39; to fetch data for all user (default: current user) (optional)
     * @param  string $customer DEPRECATED: Customer ID to filter timesheets (will be removed with 2.0) (optional)
     * @param  string $customers Comma separated list of customer IDs to filter timesheets (optional)
     * @param  string $project DEPRECATED: Project ID to filter timesheets (will be removed with 2.0) (optional)
     * @param  string $projects Comma separated list of project IDs to filter timesheets (optional)
     * @param  string $activity DEPRECATED: Activity ID to filter timesheets (will be removed with 2.0) (optional)
     * @param  string $activities Comma separated list of activity IDs to filter timesheets (optional)
     * @param  string $page The page to display, renders a 404 if not found (default: 1) (optional)
     * @param  string $size The amount of entries for each page (default: 50) (optional)
     * @param  string $tags Comma separated list of tag names (optional)
     * @param  string $order_by The field by which results will be ordered. Allowed values: id, begin, end, rate (default: begin) (optional)
     * @param  string $order The result order. Allowed values: ASC, DESC (default: DESC) (optional)
     * @param  string $begin Only records after this date will be included (format: HTML5) (optional)
     * @param  string $end Only records before this date will be included (format: HTML5) (optional)
     * @param  string $exported Use this flag if you want to filter for export state. Allowed values: 0&#x3D;not exported, 1&#x3D;exported (default: all) (optional)
     * @param  string $active Filter for running/active records. Allowed values: 0&#x3D;stopped, 1&#x3D;active (default: all) (optional)
     * @param  string $billable Filter for non-/billable records. Allowed values: 0&#x3D;non-billable, 1&#x3D;billable (default: all) (optional)
     * @param  string $full Allows to fetch fully serialized objects including subresources. Allowed values: true (default: false) (optional)
     * @param  string $term Free search term (optional)
     * @param  string $modified_after Only records changed after this date will be included (format: HTML5). Available since Kimai 1.10 and works only for records that were created/updated since then. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTimesheetsGetAsync($user = null, $customer = null, $customers = null, $project = null, $projects = null, $activity = null, $activities = null, $page = null, $size = null, $tags = null, $order_by = null, $order = null, $begin = null, $end = null, $exported = null, $active = null, $billable = null, $full = null, $term = null, $modified_after = null)
    {
        return $this->apiTimesheetsGetAsyncWithHttpInfo($user, $customer, $customers, $project, $projects, $activity, $activities, $page, $size, $tags, $order_by, $order, $begin, $end, $exported, $active, $billable, $full, $term, $modified_after)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTimesheetsGetAsyncWithHttpInfo
     *
     * Returns a collection of timesheet records
     *
     * @param  string $user User ID to filter timesheets. Needs permission &#39;view_other_timesheet&#39;, pass &#39;all&#39; to fetch data for all user (default: current user) (optional)
     * @param  string $customer DEPRECATED: Customer ID to filter timesheets (will be removed with 2.0) (optional)
     * @param  string $customers Comma separated list of customer IDs to filter timesheets (optional)
     * @param  string $project DEPRECATED: Project ID to filter timesheets (will be removed with 2.0) (optional)
     * @param  string $projects Comma separated list of project IDs to filter timesheets (optional)
     * @param  string $activity DEPRECATED: Activity ID to filter timesheets (will be removed with 2.0) (optional)
     * @param  string $activities Comma separated list of activity IDs to filter timesheets (optional)
     * @param  string $page The page to display, renders a 404 if not found (default: 1) (optional)
     * @param  string $size The amount of entries for each page (default: 50) (optional)
     * @param  string $tags Comma separated list of tag names (optional)
     * @param  string $order_by The field by which results will be ordered. Allowed values: id, begin, end, rate (default: begin) (optional)
     * @param  string $order The result order. Allowed values: ASC, DESC (default: DESC) (optional)
     * @param  string $begin Only records after this date will be included (format: HTML5) (optional)
     * @param  string $end Only records before this date will be included (format: HTML5) (optional)
     * @param  string $exported Use this flag if you want to filter for export state. Allowed values: 0&#x3D;not exported, 1&#x3D;exported (default: all) (optional)
     * @param  string $active Filter for running/active records. Allowed values: 0&#x3D;stopped, 1&#x3D;active (default: all) (optional)
     * @param  string $billable Filter for non-/billable records. Allowed values: 0&#x3D;non-billable, 1&#x3D;billable (default: all) (optional)
     * @param  string $full Allows to fetch fully serialized objects including subresources. Allowed values: true (default: false) (optional)
     * @param  string $term Free search term (optional)
     * @param  string $modified_after Only records changed after this date will be included (format: HTML5). Available since Kimai 1.10 and works only for records that were created/updated since then. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTimesheetsGetAsyncWithHttpInfo($user = null, $customer = null, $customers = null, $project = null, $projects = null, $activity = null, $activities = null, $page = null, $size = null, $tags = null, $order_by = null, $order = null, $begin = null, $end = null, $exported = null, $active = null, $billable = null, $full = null, $term = null, $modified_after = null)
    {
        $returnType = '\Swagger\Client\Model\TimesheetCollection[]';
        $request = $this->apiTimesheetsGetRequest($user, $customer, $customers, $project, $projects, $activity, $activities, $page, $size, $tags, $order_by, $order, $begin, $end, $exported, $active, $billable, $full, $term, $modified_after);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTimesheetsGet'
     *
     * @param  string $user User ID to filter timesheets. Needs permission &#39;view_other_timesheet&#39;, pass &#39;all&#39; to fetch data for all user (default: current user) (optional)
     * @param  string $customer DEPRECATED: Customer ID to filter timesheets (will be removed with 2.0) (optional)
     * @param  string $customers Comma separated list of customer IDs to filter timesheets (optional)
     * @param  string $project DEPRECATED: Project ID to filter timesheets (will be removed with 2.0) (optional)
     * @param  string $projects Comma separated list of project IDs to filter timesheets (optional)
     * @param  string $activity DEPRECATED: Activity ID to filter timesheets (will be removed with 2.0) (optional)
     * @param  string $activities Comma separated list of activity IDs to filter timesheets (optional)
     * @param  string $page The page to display, renders a 404 if not found (default: 1) (optional)
     * @param  string $size The amount of entries for each page (default: 50) (optional)
     * @param  string $tags Comma separated list of tag names (optional)
     * @param  string $order_by The field by which results will be ordered. Allowed values: id, begin, end, rate (default: begin) (optional)
     * @param  string $order The result order. Allowed values: ASC, DESC (default: DESC) (optional)
     * @param  string $begin Only records after this date will be included (format: HTML5) (optional)
     * @param  string $end Only records before this date will be included (format: HTML5) (optional)
     * @param  string $exported Use this flag if you want to filter for export state. Allowed values: 0&#x3D;not exported, 1&#x3D;exported (default: all) (optional)
     * @param  string $active Filter for running/active records. Allowed values: 0&#x3D;stopped, 1&#x3D;active (default: all) (optional)
     * @param  string $billable Filter for non-/billable records. Allowed values: 0&#x3D;non-billable, 1&#x3D;billable (default: all) (optional)
     * @param  string $full Allows to fetch fully serialized objects including subresources. Allowed values: true (default: false) (optional)
     * @param  string $term Free search term (optional)
     * @param  string $modified_after Only records changed after this date will be included (format: HTML5). Available since Kimai 1.10 and works only for records that were created/updated since then. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiTimesheetsGetRequest($user = null, $customer = null, $customers = null, $project = null, $projects = null, $activity = null, $activities = null, $page = null, $size = null, $tags = null, $order_by = null, $order = null, $begin = null, $end = null, $exported = null, $active = null, $billable = null, $full = null, $term = null, $modified_after = null)
    {
        if ($user !== null && !preg_match("/\\d+|all/", $user)) {
            throw new \InvalidArgumentException("invalid value for \"user\" when calling TimesheetApi.apiTimesheetsGet, must conform to the pattern /\\d+|all/.");
        }

        if ($customer !== null && !preg_match("/\\d+/", $customer)) {
            throw new \InvalidArgumentException("invalid value for \"customer\" when calling TimesheetApi.apiTimesheetsGet, must conform to the pattern /\\d+/.");
        }

        if ($customers !== null && !preg_match("/[\\d|,]+/", $customers)) {
            throw new \InvalidArgumentException("invalid value for \"customers\" when calling TimesheetApi.apiTimesheetsGet, must conform to the pattern /[\\d|,]+/.");
        }

        if ($project !== null && !preg_match("/\\d+/", $project)) {
            throw new \InvalidArgumentException("invalid value for \"project\" when calling TimesheetApi.apiTimesheetsGet, must conform to the pattern /\\d+/.");
        }

        if ($projects !== null && !preg_match("/[\\d|,]+/", $projects)) {
            throw new \InvalidArgumentException("invalid value for \"projects\" when calling TimesheetApi.apiTimesheetsGet, must conform to the pattern /[\\d|,]+/.");
        }

        if ($activity !== null && !preg_match("/\\d+/", $activity)) {
            throw new \InvalidArgumentException("invalid value for \"activity\" when calling TimesheetApi.apiTimesheetsGet, must conform to the pattern /\\d+/.");
        }

        if ($activities !== null && !preg_match("/[\\d|,]+/", $activities)) {
            throw new \InvalidArgumentException("invalid value for \"activities\" when calling TimesheetApi.apiTimesheetsGet, must conform to the pattern /[\\d|,]+/.");
        }

        if ($page !== null && !preg_match("/\\d+/", $page)) {
            throw new \InvalidArgumentException("invalid value for \"page\" when calling TimesheetApi.apiTimesheetsGet, must conform to the pattern /\\d+/.");
        }

        if ($size !== null && !preg_match("/\\d+/", $size)) {
            throw new \InvalidArgumentException("invalid value for \"size\" when calling TimesheetApi.apiTimesheetsGet, must conform to the pattern /\\d+/.");
        }

        if ($order_by !== null && !preg_match("/id|begin|end|rate/", $order_by)) {
            throw new \InvalidArgumentException("invalid value for \"order_by\" when calling TimesheetApi.apiTimesheetsGet, must conform to the pattern /id|begin|end|rate/.");
        }

        if ($order !== null && !preg_match("/ASC|DESC/", $order)) {
            throw new \InvalidArgumentException("invalid value for \"order\" when calling TimesheetApi.apiTimesheetsGet, must conform to the pattern /ASC|DESC/.");
        }

        if ($exported !== null && !preg_match("/0|1/", $exported)) {
            throw new \InvalidArgumentException("invalid value for \"exported\" when calling TimesheetApi.apiTimesheetsGet, must conform to the pattern /0|1/.");
        }

        if ($active !== null && !preg_match("/0|1/", $active)) {
            throw new \InvalidArgumentException("invalid value for \"active\" when calling TimesheetApi.apiTimesheetsGet, must conform to the pattern /0|1/.");
        }

        if ($billable !== null && !preg_match("/0|1/", $billable)) {
            throw new \InvalidArgumentException("invalid value for \"billable\" when calling TimesheetApi.apiTimesheetsGet, must conform to the pattern /0|1/.");
        }

        if ($full !== null && !preg_match("/true/", $full)) {
            throw new \InvalidArgumentException("invalid value for \"full\" when calling TimesheetApi.apiTimesheetsGet, must conform to the pattern /true/.");
        }


        $resourcePath = '/api/timesheets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($user !== null) {
            $queryParams['user'] = ObjectSerializer::toQueryValue($user);
        }
        // query params
        if ($customer !== null) {
            $queryParams['customer'] = ObjectSerializer::toQueryValue($customer);
        }
        // query params
        if ($customers !== null) {
            $queryParams['customers'] = ObjectSerializer::toQueryValue($customers);
        }
        // query params
        if ($project !== null) {
            $queryParams['project'] = ObjectSerializer::toQueryValue($project);
        }
        // query params
        if ($projects !== null) {
            $queryParams['projects'] = ObjectSerializer::toQueryValue($projects);
        }
        // query params
        if ($activity !== null) {
            $queryParams['activity'] = ObjectSerializer::toQueryValue($activity);
        }
        // query params
        if ($activities !== null) {
            $queryParams['activities'] = ObjectSerializer::toQueryValue($activities);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = ObjectSerializer::toQueryValue($size);
        }
        // query params
        if ($tags !== null) {
            $queryParams['tags'] = ObjectSerializer::toQueryValue($tags);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['orderBy'] = ObjectSerializer::toQueryValue($order_by);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = ObjectSerializer::toQueryValue($order);
        }
        // query params
        if ($begin !== null) {
            $queryParams['begin'] = ObjectSerializer::toQueryValue($begin);
        }
        // query params
        if ($end !== null) {
            $queryParams['end'] = ObjectSerializer::toQueryValue($end);
        }
        // query params
        if ($exported !== null) {
            $queryParams['exported'] = ObjectSerializer::toQueryValue($exported);
        }
        // query params
        if ($active !== null) {
            $queryParams['active'] = ObjectSerializer::toQueryValue($active);
        }
        // query params
        if ($billable !== null) {
            $queryParams['billable'] = ObjectSerializer::toQueryValue($billable);
        }
        // query params
        if ($full !== null) {
            $queryParams['full'] = ObjectSerializer::toQueryValue($full);
        }
        // query params
        if ($term !== null) {
            $queryParams['term'] = ObjectSerializer::toQueryValue($term);
        }
        // query params
        if ($modified_after !== null) {
            $queryParams['modified_after'] = ObjectSerializer::toQueryValue($modified_after);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if ($apiKey !== null) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-USER');
        if ($apiKey !== null) {
            $headers['X-AUTH-USER'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTimesheetsIdDelete
     *
     * Delete an existing timesheet record
     *
     * @param  int $id Timesheet record ID to delete (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiTimesheetsIdDelete($id)
    {
        $this->apiTimesheetsIdDeleteWithHttpInfo($id);
    }

    /**
     * Operation apiTimesheetsIdDeleteWithHttpInfo
     *
     * Delete an existing timesheet record
     *
     * @param  int $id Timesheet record ID to delete (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTimesheetsIdDeleteWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->apiTimesheetsIdDeleteRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiTimesheetsIdDeleteAsync
     *
     * Delete an existing timesheet record
     *
     * @param  int $id Timesheet record ID to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTimesheetsIdDeleteAsync($id)
    {
        return $this->apiTimesheetsIdDeleteAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTimesheetsIdDeleteAsyncWithHttpInfo
     *
     * Delete an existing timesheet record
     *
     * @param  int $id Timesheet record ID to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTimesheetsIdDeleteAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->apiTimesheetsIdDeleteRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTimesheetsIdDelete'
     *
     * @param  int $id Timesheet record ID to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiTimesheetsIdDeleteRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiTimesheetsIdDelete'
            );
        }

        $resourcePath = '/api/timesheets/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if ($apiKey !== null) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-USER');
        if ($apiKey !== null) {
            $headers['X-AUTH-USER'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTimesheetsIdDuplicatePatch
     *
     * Duplicates an existing timesheet record
     *
     * @param  int $id Timesheet record ID to duplicate (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TimesheetEntity
     */
    public function apiTimesheetsIdDuplicatePatch($id)
    {
        list($response) = $this->apiTimesheetsIdDuplicatePatchWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation apiTimesheetsIdDuplicatePatchWithHttpInfo
     *
     * Duplicates an existing timesheet record
     *
     * @param  int $id Timesheet record ID to duplicate (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TimesheetEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTimesheetsIdDuplicatePatchWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\TimesheetEntity';
        $request = $this->apiTimesheetsIdDuplicatePatchRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\TimesheetEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiTimesheetsIdDuplicatePatchAsync
     *
     * Duplicates an existing timesheet record
     *
     * @param  int $id Timesheet record ID to duplicate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTimesheetsIdDuplicatePatchAsync($id)
    {
        return $this->apiTimesheetsIdDuplicatePatchAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTimesheetsIdDuplicatePatchAsyncWithHttpInfo
     *
     * Duplicates an existing timesheet record
     *
     * @param  int $id Timesheet record ID to duplicate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTimesheetsIdDuplicatePatchAsyncWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\TimesheetEntity';
        $request = $this->apiTimesheetsIdDuplicatePatchRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTimesheetsIdDuplicatePatch'
     *
     * @param  int $id Timesheet record ID to duplicate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiTimesheetsIdDuplicatePatchRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiTimesheetsIdDuplicatePatch'
            );
        }

        $resourcePath = '/api/timesheets/{id}/duplicate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if ($apiKey !== null) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-USER');
        if ($apiKey !== null) {
            $headers['X-AUTH-USER'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTimesheetsIdExportPatch
     *
     * Switch the export state of a timesheet record to (un-)lock it
     *
     * @param  int $id Timesheet record ID to switch export state (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TimesheetEntity
     */
    public function apiTimesheetsIdExportPatch($id)
    {
        list($response) = $this->apiTimesheetsIdExportPatchWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation apiTimesheetsIdExportPatchWithHttpInfo
     *
     * Switch the export state of a timesheet record to (un-)lock it
     *
     * @param  int $id Timesheet record ID to switch export state (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TimesheetEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTimesheetsIdExportPatchWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\TimesheetEntity';
        $request = $this->apiTimesheetsIdExportPatchRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\TimesheetEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiTimesheetsIdExportPatchAsync
     *
     * Switch the export state of a timesheet record to (un-)lock it
     *
     * @param  int $id Timesheet record ID to switch export state (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTimesheetsIdExportPatchAsync($id)
    {
        return $this->apiTimesheetsIdExportPatchAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTimesheetsIdExportPatchAsyncWithHttpInfo
     *
     * Switch the export state of a timesheet record to (un-)lock it
     *
     * @param  int $id Timesheet record ID to switch export state (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTimesheetsIdExportPatchAsyncWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\TimesheetEntity';
        $request = $this->apiTimesheetsIdExportPatchRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTimesheetsIdExportPatch'
     *
     * @param  int $id Timesheet record ID to switch export state (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiTimesheetsIdExportPatchRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiTimesheetsIdExportPatch'
            );
        }

        $resourcePath = '/api/timesheets/{id}/export';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if ($apiKey !== null) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-USER');
        if ($apiKey !== null) {
            $headers['X-AUTH-USER'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTimesheetsIdGet
     *
     * Returns one timesheet record
     *
     * @param  int $id Timesheet record ID to fetch (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TimesheetEntity
     */
    public function apiTimesheetsIdGet($id)
    {
        list($response) = $this->apiTimesheetsIdGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation apiTimesheetsIdGetWithHttpInfo
     *
     * Returns one timesheet record
     *
     * @param  int $id Timesheet record ID to fetch (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TimesheetEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTimesheetsIdGetWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\TimesheetEntity';
        $request = $this->apiTimesheetsIdGetRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\TimesheetEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiTimesheetsIdGetAsync
     *
     * Returns one timesheet record
     *
     * @param  int $id Timesheet record ID to fetch (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTimesheetsIdGetAsync($id)
    {
        return $this->apiTimesheetsIdGetAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTimesheetsIdGetAsyncWithHttpInfo
     *
     * Returns one timesheet record
     *
     * @param  int $id Timesheet record ID to fetch (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTimesheetsIdGetAsyncWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\TimesheetEntity';
        $request = $this->apiTimesheetsIdGetRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTimesheetsIdGet'
     *
     * @param  int $id Timesheet record ID to fetch (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiTimesheetsIdGetRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiTimesheetsIdGet'
            );
        }

        $resourcePath = '/api/timesheets/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if ($apiKey !== null) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-USER');
        if ($apiKey !== null) {
            $headers['X-AUTH-USER'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTimesheetsIdMetaPatch
     *
     * Sets the value of a meta-field for an existing timesheet.
     *
     * @param  int $id Timesheet record ID to set the meta-field value for (required)
     * @param  \Swagger\Client\Model\Body $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TimesheetEntity
     */
    public function apiTimesheetsIdMetaPatch($id, $body = null)
    {
        list($response) = $this->apiTimesheetsIdMetaPatchWithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation apiTimesheetsIdMetaPatchWithHttpInfo
     *
     * Sets the value of a meta-field for an existing timesheet.
     *
     * @param  int $id Timesheet record ID to set the meta-field value for (required)
     * @param  \Swagger\Client\Model\Body $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TimesheetEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTimesheetsIdMetaPatchWithHttpInfo($id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\TimesheetEntity';
        $request = $this->apiTimesheetsIdMetaPatchRequest($id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\TimesheetEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiTimesheetsIdMetaPatchAsync
     *
     * Sets the value of a meta-field for an existing timesheet.
     *
     * @param  int $id Timesheet record ID to set the meta-field value for (required)
     * @param  \Swagger\Client\Model\Body $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTimesheetsIdMetaPatchAsync($id, $body = null)
    {
        return $this->apiTimesheetsIdMetaPatchAsyncWithHttpInfo($id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTimesheetsIdMetaPatchAsyncWithHttpInfo
     *
     * Sets the value of a meta-field for an existing timesheet.
     *
     * @param  int $id Timesheet record ID to set the meta-field value for (required)
     * @param  \Swagger\Client\Model\Body $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTimesheetsIdMetaPatchAsyncWithHttpInfo($id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\TimesheetEntity';
        $request = $this->apiTimesheetsIdMetaPatchRequest($id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTimesheetsIdMetaPatch'
     *
     * @param  int $id Timesheet record ID to set the meta-field value for (required)
     * @param  \Swagger\Client\Model\Body $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiTimesheetsIdMetaPatchRequest($id, $body = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiTimesheetsIdMetaPatch'
            );
        }

        $resourcePath = '/api/timesheets/{id}/meta';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if ($apiKey !== null) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-USER');
        if ($apiKey !== null) {
            $headers['X-AUTH-USER'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTimesheetsIdPatch
     *
     * Update an existing timesheet record
     *
     * @param  int $id Timesheet record ID to update (required)
     * @param  \Swagger\Client\Model\TimesheetEditForm $body body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TimesheetEntity
     */
    public function apiTimesheetsIdPatch($id, $body)
    {
        list($response) = $this->apiTimesheetsIdPatchWithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation apiTimesheetsIdPatchWithHttpInfo
     *
     * Update an existing timesheet record
     *
     * @param  int $id Timesheet record ID to update (required)
     * @param  \Swagger\Client\Model\TimesheetEditForm $body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TimesheetEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTimesheetsIdPatchWithHttpInfo($id, $body)
    {
        $returnType = '\Swagger\Client\Model\TimesheetEntity';
        $request = $this->apiTimesheetsIdPatchRequest($id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\TimesheetEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiTimesheetsIdPatchAsync
     *
     * Update an existing timesheet record
     *
     * @param  int $id Timesheet record ID to update (required)
     * @param  \Swagger\Client\Model\TimesheetEditForm $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTimesheetsIdPatchAsync($id, $body)
    {
        return $this->apiTimesheetsIdPatchAsyncWithHttpInfo($id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTimesheetsIdPatchAsyncWithHttpInfo
     *
     * Update an existing timesheet record
     *
     * @param  int $id Timesheet record ID to update (required)
     * @param  \Swagger\Client\Model\TimesheetEditForm $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTimesheetsIdPatchAsyncWithHttpInfo($id, $body)
    {
        $returnType = '\Swagger\Client\Model\TimesheetEntity';
        $request = $this->apiTimesheetsIdPatchRequest($id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTimesheetsIdPatch'
     *
     * @param  int $id Timesheet record ID to update (required)
     * @param  \Swagger\Client\Model\TimesheetEditForm $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiTimesheetsIdPatchRequest($id, $body)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiTimesheetsIdPatch'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling apiTimesheetsIdPatch'
            );
        }

        $resourcePath = '/api/timesheets/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if ($apiKey !== null) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-USER');
        if ($apiKey !== null) {
            $headers['X-AUTH-USER'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTimesheetsIdRestartPatch
     *
     * Restarts a previously stopped timesheet record for the current user
     *
     * @param  int $id Timesheet record ID to restart (required)
     * @param  \Swagger\Client\Model\Body $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TimesheetEntity
     */
    public function apiTimesheetsIdRestartPatch($id, $body = null)
    {
        list($response) = $this->apiTimesheetsIdRestartPatchWithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation apiTimesheetsIdRestartPatchWithHttpInfo
     *
     * Restarts a previously stopped timesheet record for the current user
     *
     * @param  int $id Timesheet record ID to restart (required)
     * @param  \Swagger\Client\Model\Body $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TimesheetEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTimesheetsIdRestartPatchWithHttpInfo($id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\TimesheetEntity';
        $request = $this->apiTimesheetsIdRestartPatchRequest($id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\TimesheetEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiTimesheetsIdRestartPatchAsync
     *
     * Restarts a previously stopped timesheet record for the current user
     *
     * @param  int $id Timesheet record ID to restart (required)
     * @param  \Swagger\Client\Model\Body $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTimesheetsIdRestartPatchAsync($id, $body = null)
    {
        return $this->apiTimesheetsIdRestartPatchAsyncWithHttpInfo($id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTimesheetsIdRestartPatchAsyncWithHttpInfo
     *
     * Restarts a previously stopped timesheet record for the current user
     *
     * @param  int $id Timesheet record ID to restart (required)
     * @param  \Swagger\Client\Model\Body $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTimesheetsIdRestartPatchAsyncWithHttpInfo($id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\TimesheetEntity';
        $request = $this->apiTimesheetsIdRestartPatchRequest($id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTimesheetsIdRestartPatch'
     *
     * @param  int $id Timesheet record ID to restart (required)
     * @param  \Swagger\Client\Model\Body $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiTimesheetsIdRestartPatchRequest($id, $body = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiTimesheetsIdRestartPatch'
            );
        }

        $resourcePath = '/api/timesheets/{id}/restart';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if ($apiKey !== null) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-USER');
        if ($apiKey !== null) {
            $headers['X-AUTH-USER'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTimesheetsIdStopPatch
     *
     * Stops an active timesheet record
     *
     * @param  int $id Timesheet record ID to stop (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TimesheetEntity
     */
    public function apiTimesheetsIdStopPatch($id)
    {
        list($response) = $this->apiTimesheetsIdStopPatchWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation apiTimesheetsIdStopPatchWithHttpInfo
     *
     * Stops an active timesheet record
     *
     * @param  int $id Timesheet record ID to stop (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TimesheetEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTimesheetsIdStopPatchWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\TimesheetEntity';
        $request = $this->apiTimesheetsIdStopPatchRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\TimesheetEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiTimesheetsIdStopPatchAsync
     *
     * Stops an active timesheet record
     *
     * @param  int $id Timesheet record ID to stop (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTimesheetsIdStopPatchAsync($id)
    {
        return $this->apiTimesheetsIdStopPatchAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTimesheetsIdStopPatchAsyncWithHttpInfo
     *
     * Stops an active timesheet record
     *
     * @param  int $id Timesheet record ID to stop (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTimesheetsIdStopPatchAsyncWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\TimesheetEntity';
        $request = $this->apiTimesheetsIdStopPatchRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTimesheetsIdStopPatch'
     *
     * @param  int $id Timesheet record ID to stop (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiTimesheetsIdStopPatchRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiTimesheetsIdStopPatch'
            );
        }

        $resourcePath = '/api/timesheets/{id}/stop';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if ($apiKey !== null) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-USER');
        if ($apiKey !== null) {
            $headers['X-AUTH-USER'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTimesheetsPost
     *
     * Creates a new timesheet record
     *
     * @param  \Swagger\Client\Model\TimesheetEditForm $body body (required)
     * @param  string $full Allows to fetch fully serialized objects including subresources (TimesheetEntityExpanded). Allowed values: true (default: false) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TimesheetEntity
     */
    public function apiTimesheetsPost($body, $full = null)
    {
        list($response) = $this->apiTimesheetsPostWithHttpInfo($body, $full);
        return $response;
    }

    /**
     * Operation apiTimesheetsPostWithHttpInfo
     *
     * Creates a new timesheet record
     *
     * @param  \Swagger\Client\Model\TimesheetEditForm $body (required)
     * @param  string $full Allows to fetch fully serialized objects including subresources (TimesheetEntityExpanded). Allowed values: true (default: false) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TimesheetEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTimesheetsPostWithHttpInfo($body, $full = null)
    {
        $returnType = '\Swagger\Client\Model\TimesheetEntity';
        $request = $this->apiTimesheetsPostRequest($body, $full);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\TimesheetEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiTimesheetsPostAsync
     *
     * Creates a new timesheet record
     *
     * @param  \Swagger\Client\Model\TimesheetEditForm $body (required)
     * @param  string $full Allows to fetch fully serialized objects including subresources (TimesheetEntityExpanded). Allowed values: true (default: false) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTimesheetsPostAsync($body, $full = null)
    {
        return $this->apiTimesheetsPostAsyncWithHttpInfo($body, $full)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTimesheetsPostAsyncWithHttpInfo
     *
     * Creates a new timesheet record
     *
     * @param  \Swagger\Client\Model\TimesheetEditForm $body (required)
     * @param  string $full Allows to fetch fully serialized objects including subresources (TimesheetEntityExpanded). Allowed values: true (default: false) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTimesheetsPostAsyncWithHttpInfo($body, $full = null)
    {
        $returnType = '\Swagger\Client\Model\TimesheetEntity';
        $request = $this->apiTimesheetsPostRequest($body, $full);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTimesheetsPost'
     *
     * @param  \Swagger\Client\Model\TimesheetEditForm $body (required)
     * @param  string $full Allows to fetch fully serialized objects including subresources (TimesheetEntityExpanded). Allowed values: true (default: false) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiTimesheetsPostRequest($body, $full = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling apiTimesheetsPost'
            );
        }
        if ($full !== null && !preg_match("/true/", $full)) {
            throw new \InvalidArgumentException("invalid value for \"full\" when calling TimesheetApi.apiTimesheetsPost, must conform to the pattern /true/.");
        }


        $resourcePath = '/api/timesheets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($full !== null) {
            $queryParams['full'] = ObjectSerializer::toQueryValue($full);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if ($apiKey !== null) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-USER');
        if ($apiKey !== null) {
            $headers['X-AUTH-USER'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTimesheetsRecentGet
     *
     * Returns the collection of recent user activities
     *
     * @param  string $user User ID to filter timesheets. Needs permission &#39;view_other_timesheet&#39;, pass &#39;all&#39; to fetch data for all user (default: current user) (optional)
     * @param  string $begin Only records after this date will be included. Default: today - 1 year (format: HTML5) (optional)
     * @param  string $size The amount of entries (default: 10) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TimesheetCollectionExpanded[]
     */
    public function apiTimesheetsRecentGet($user = null, $begin = null, $size = null)
    {
        list($response) = $this->apiTimesheetsRecentGetWithHttpInfo($user, $begin, $size);
        return $response;
    }

    /**
     * Operation apiTimesheetsRecentGetWithHttpInfo
     *
     * Returns the collection of recent user activities
     *
     * @param  string $user User ID to filter timesheets. Needs permission &#39;view_other_timesheet&#39;, pass &#39;all&#39; to fetch data for all user (default: current user) (optional)
     * @param  string $begin Only records after this date will be included. Default: today - 1 year (format: HTML5) (optional)
     * @param  string $size The amount of entries (default: 10) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TimesheetCollectionExpanded[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTimesheetsRecentGetWithHttpInfo($user = null, $begin = null, $size = null)
    {
        $returnType = '\Swagger\Client\Model\TimesheetCollectionExpanded[]';
        $request = $this->apiTimesheetsRecentGetRequest($user, $begin, $size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\TimesheetCollectionExpanded[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiTimesheetsRecentGetAsync
     *
     * Returns the collection of recent user activities
     *
     * @param  string $user User ID to filter timesheets. Needs permission &#39;view_other_timesheet&#39;, pass &#39;all&#39; to fetch data for all user (default: current user) (optional)
     * @param  string $begin Only records after this date will be included. Default: today - 1 year (format: HTML5) (optional)
     * @param  string $size The amount of entries (default: 10) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTimesheetsRecentGetAsync($user = null, $begin = null, $size = null)
    {
        return $this->apiTimesheetsRecentGetAsyncWithHttpInfo($user, $begin, $size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTimesheetsRecentGetAsyncWithHttpInfo
     *
     * Returns the collection of recent user activities
     *
     * @param  string $user User ID to filter timesheets. Needs permission &#39;view_other_timesheet&#39;, pass &#39;all&#39; to fetch data for all user (default: current user) (optional)
     * @param  string $begin Only records after this date will be included. Default: today - 1 year (format: HTML5) (optional)
     * @param  string $size The amount of entries (default: 10) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTimesheetsRecentGetAsyncWithHttpInfo($user = null, $begin = null, $size = null)
    {
        $returnType = '\Swagger\Client\Model\TimesheetCollectionExpanded[]';
        $request = $this->apiTimesheetsRecentGetRequest($user, $begin, $size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTimesheetsRecentGet'
     *
     * @param  string $user User ID to filter timesheets. Needs permission &#39;view_other_timesheet&#39;, pass &#39;all&#39; to fetch data for all user (default: current user) (optional)
     * @param  string $begin Only records after this date will be included. Default: today - 1 year (format: HTML5) (optional)
     * @param  string $size The amount of entries (default: 10) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiTimesheetsRecentGetRequest($user = null, $begin = null, $size = null)
    {
        if ($user !== null && !preg_match("/\\d+|all/", $user)) {
            throw new \InvalidArgumentException("invalid value for \"user\" when calling TimesheetApi.apiTimesheetsRecentGet, must conform to the pattern /\\d+|all/.");
        }

        if ($size !== null && !preg_match("/\\d+/", $size)) {
            throw new \InvalidArgumentException("invalid value for \"size\" when calling TimesheetApi.apiTimesheetsRecentGet, must conform to the pattern /\\d+/.");
        }


        $resourcePath = '/api/timesheets/recent';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($user !== null) {
            $queryParams['user'] = ObjectSerializer::toQueryValue($user);
        }
        // query params
        if ($begin !== null) {
            $queryParams['begin'] = ObjectSerializer::toQueryValue($begin);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = ObjectSerializer::toQueryValue($size);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if ($apiKey !== null) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-USER');
        if ($apiKey !== null) {
            $headers['X-AUTH-USER'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
