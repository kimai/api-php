<?php
/**
 * Task
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kimai - API Docs
 *
 * JSON API for the Kimai time-tracking software: [API documentation](https://www.kimai.org/documentation/rest-api.html), [Swagger definition file](doc.json)
 *
 * OpenAPI spec version: 0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Task Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Task implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Task';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'tags' => 'string[]',
        'active_timesheets' => '\Swagger\Client\Model\TimesheetEntityExpanded[]',
        'id' => 'int',
        'title' => 'string',
        'status' => 'string',
        'todo' => 'string',
        'description' => 'string',
        'project' => '\Swagger\Client\Model\ProjectExpanded',
        'activity' => '\Swagger\Client\Model\ActivityExpanded',
        'user' => '\Swagger\Client\Model\User',
        'team' => '\Swagger\Client\Model\Team',
        'end' => '\DateTime',
        'estimation' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'tags' => null,
        'active_timesheets' => null,
        'id' => null,
        'title' => null,
        'status' => null,
        'todo' => null,
        'description' => null,
        'project' => null,
        'activity' => null,
        'user' => null,
        'team' => null,
        'end' => 'date-time',
        'estimation' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tags' => 'tags',
        'active_timesheets' => 'activeTimesheets',
        'id' => 'id',
        'title' => 'title',
        'status' => 'status',
        'todo' => 'todo',
        'description' => 'description',
        'project' => 'project',
        'activity' => 'activity',
        'user' => 'user',
        'team' => 'team',
        'end' => 'end',
        'estimation' => 'estimation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tags' => 'setTags',
        'active_timesheets' => 'setActiveTimesheets',
        'id' => 'setId',
        'title' => 'setTitle',
        'status' => 'setStatus',
        'todo' => 'setTodo',
        'description' => 'setDescription',
        'project' => 'setProject',
        'activity' => 'setActivity',
        'user' => 'setUser',
        'team' => 'setTeam',
        'end' => 'setEnd',
        'estimation' => 'setEstimation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tags' => 'getTags',
        'active_timesheets' => 'getActiveTimesheets',
        'id' => 'getId',
        'title' => 'getTitle',
        'status' => 'getStatus',
        'todo' => 'getTodo',
        'description' => 'getDescription',
        'project' => 'getProject',
        'activity' => 'getActivity',
        'user' => 'getUser',
        'team' => 'getTeam',
        'end' => 'getEnd',
        'estimation' => 'getEstimation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['active_timesheets'] = isset($data['active_timesheets']) ? $data['active_timesheets'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['todo'] = isset($data['todo']) ? $data['todo'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['activity'] = isset($data['activity']) ? $data['activity'] : null;
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
        $this->container['team'] = isset($data['team']) ? $data['team'] : null;
        $this->container['end'] = isset($data['end']) ? $data['end'] : null;
        $this->container['estimation'] = isset($data['estimation']) ? $data['estimation'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ((mb_strlen($this->container['title']) > 100)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be smaller than or equal to 100.";
        }

        if ((mb_strlen($this->container['title']) < 2)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be bigger than or equal to 2.";
        }

        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ((mb_strlen($this->container['status']) > 20)) {
            $invalidProperties[] = "invalid value for 'status', the character length must be smaller than or equal to 20.";
        }

        if ($this->container['project'] === null) {
            $invalidProperties[] = "'project' can't be null";
        }
        if ($this->container['activity'] === null) {
            $invalidProperties[] = "'activity' can't be null";
        }
        if (!is_null($this->container['estimation']) && ($this->container['estimation'] < 0)) {
            $invalidProperties[] = "invalid value for 'estimation', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets tags
     *
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets active_timesheets
     *
     * @return \Swagger\Client\Model\TimesheetEntityExpanded[]
     */
    public function getActiveTimesheets()
    {
        return $this->container['active_timesheets'];
    }

    /**
     * Sets active_timesheets
     *
     * @param \Swagger\Client\Model\TimesheetEntityExpanded[] $active_timesheets active_timesheets
     *
     * @return $this
     */
    public function setActiveTimesheets($active_timesheets)
    {
        $this->container['active_timesheets'] = $active_timesheets;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        if ((mb_strlen($title) > 100)) {
            throw new \InvalidArgumentException('invalid length for $title when calling Task., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($title) < 2)) {
            throw new \InvalidArgumentException('invalid length for $title when calling Task., must be bigger than or equal to 2.');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        if ((mb_strlen($status) > 20)) {
            throw new \InvalidArgumentException('invalid length for $status when calling Task., must be smaller than or equal to 20.');
        }

        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets todo
     *
     * @return string
     */
    public function getTodo()
    {
        return $this->container['todo'];
    }

    /**
     * Sets todo
     *
     * @param string $todo todo
     *
     * @return $this
     */
    public function setTodo($todo)
    {
        $this->container['todo'] = $todo;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets project
     *
     * @return \Swagger\Client\Model\ProjectExpanded
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param \Swagger\Client\Model\ProjectExpanded $project project
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets activity
     *
     * @return \Swagger\Client\Model\ActivityExpanded
     */
    public function getActivity()
    {
        return $this->container['activity'];
    }

    /**
     * Sets activity
     *
     * @param \Swagger\Client\Model\ActivityExpanded $activity activity
     *
     * @return $this
     */
    public function setActivity($activity)
    {
        $this->container['activity'] = $activity;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \Swagger\Client\Model\User
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \Swagger\Client\Model\User $user user
     *
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets team
     *
     * @return \Swagger\Client\Model\Team
     */
    public function getTeam()
    {
        return $this->container['team'];
    }

    /**
     * Sets team
     *
     * @param \Swagger\Client\Model\Team $team team
     *
     * @return $this
     */
    public function setTeam($team)
    {
        $this->container['team'] = $team;

        return $this;
    }

    /**
     * Gets end
     *
     * @return \DateTime
     */
    public function getEnd()
    {
        return $this->container['end'];
    }

    /**
     * Sets end
     *
     * @param \DateTime $end end
     *
     * @return $this
     */
    public function setEnd($end)
    {
        $this->container['end'] = $end;

        return $this;
    }

    /**
     * Gets estimation
     *
     * @return int
     */
    public function getEstimation()
    {
        return $this->container['estimation'];
    }

    /**
     * Sets estimation
     *
     * @param int $estimation estimation
     *
     * @return $this
     */
    public function setEstimation($estimation)
    {

        if (!is_null($estimation) && ($estimation < 0)) {
            throw new \InvalidArgumentException('invalid value for $estimation when calling Task., must be bigger than or equal to 0.');
        }

        $this->container['estimation'] = $estimation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


