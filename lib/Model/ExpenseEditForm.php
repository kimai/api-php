<?php
/**
 * ExpenseEditForm
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kimai - API Docs
 *
 * JSON API for the Kimai time-tracking software: [API documentation](https://www.kimai.org/documentation/rest-api.html), [Swagger definition file](doc.json)
 *
 * OpenAPI spec version: 0.7
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.46
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ExpenseEditForm Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ExpenseEditForm implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ExpenseEditForm';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'user' => 'int',
        'project' => 'int',
        'activity' => 'int',
        'expense_category' => 'int',
        'description' => 'string',
        'cost' => 'float',
        'multiplier' => 'float',
        'billable_mode' => 'string',
        'exported' => 'bool',
        'begin' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'user' => null,
        'project' => null,
        'activity' => null,
        'expense_category' => null,
        'description' => null,
        'cost' => null,
        'multiplier' => null,
        'billable_mode' => null,
        'exported' => null,
        'begin' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'user' => 'user',
        'project' => 'project',
        'activity' => 'activity',
        'expense_category' => 'expenseCategory',
        'description' => 'description',
        'cost' => 'cost',
        'multiplier' => 'multiplier',
        'billable_mode' => 'billableMode',
        'exported' => 'exported',
        'begin' => 'begin'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'user' => 'setUser',
        'project' => 'setProject',
        'activity' => 'setActivity',
        'expense_category' => 'setExpenseCategory',
        'description' => 'setDescription',
        'cost' => 'setCost',
        'multiplier' => 'setMultiplier',
        'billable_mode' => 'setBillableMode',
        'exported' => 'setExported',
        'begin' => 'setBegin'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'user' => 'getUser',
        'project' => 'getProject',
        'activity' => 'getActivity',
        'expense_category' => 'getExpenseCategory',
        'description' => 'getDescription',
        'cost' => 'getCost',
        'multiplier' => 'getMultiplier',
        'billable_mode' => 'getBillableMode',
        'exported' => 'getExported',
        'begin' => 'getBegin'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const BILLABLE_MODE_AUTO = 'auto';
    const BILLABLE_MODE_YES = 'yes';
    const BILLABLE_MODE_NO = 'no';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBillableModeAllowableValues()
    {
        return [
            self::BILLABLE_MODE_AUTO,
            self::BILLABLE_MODE_YES,
            self::BILLABLE_MODE_NO,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['activity'] = isset($data['activity']) ? $data['activity'] : null;
        $this->container['expense_category'] = isset($data['expense_category']) ? $data['expense_category'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['cost'] = isset($data['cost']) ? $data['cost'] : null;
        $this->container['multiplier'] = isset($data['multiplier']) ? $data['multiplier'] : null;
        $this->container['billable_mode'] = isset($data['billable_mode']) ? $data['billable_mode'] : null;
        $this->container['exported'] = isset($data['exported']) ? $data['exported'] : null;
        $this->container['begin'] = isset($data['begin']) ? $data['begin'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['user'] === null) {
            $invalidProperties[] = "'user' can't be null";
        }
        if ($this->container['project'] === null) {
            $invalidProperties[] = "'project' can't be null";
        }
        if ($this->container['expense_category'] === null) {
            $invalidProperties[] = "'expense_category' can't be null";
        }
        if ($this->container['multiplier'] === null) {
            $invalidProperties[] = "'multiplier' can't be null";
        }
        if ($this->container['billable_mode'] === null) {
            $invalidProperties[] = "'billable_mode' can't be null";
        }
        $allowedValues = $this->getBillableModeAllowableValues();
        if (!is_null($this->container['billable_mode']) && !in_array($this->container['billable_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'billable_mode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['begin'] === null) {
            $invalidProperties[] = "'begin' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets user
     *
     * @return int
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param int $user User ID
     *
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets project
     *
     * @return int
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param int $project Project ID
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets activity
     *
     * @return int
     */
    public function getActivity()
    {
        return $this->container['activity'];
    }

    /**
     * Sets activity
     *
     * @param int $activity Activity ID
     *
     * @return $this
     */
    public function setActivity($activity)
    {
        $this->container['activity'] = $activity;

        return $this;
    }

    /**
     * Gets expense_category
     *
     * @return int
     */
    public function getExpenseCategory()
    {
        return $this->container['expense_category'];
    }

    /**
     * Sets expense_category
     *
     * @param int $expense_category Expense-Category ID
     *
     * @return $this
     */
    public function setExpenseCategory($expense_category)
    {
        $this->container['expense_category'] = $expense_category;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description for the expense
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return float
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param float $cost Cost per entry (multiplied by multiplier). This field is not available to every user.
     *
     * @return $this
     */
    public function setCost($cost)
    {
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets multiplier
     *
     * @return float
     */
    public function getMultiplier()
    {
        return $this->container['multiplier'];
    }

    /**
     * Sets multiplier
     *
     * @param float $multiplier multiplier
     *
     * @return $this
     */
    public function setMultiplier($multiplier)
    {
        $this->container['multiplier'] = $multiplier;

        return $this;
    }

    /**
     * Gets billable_mode
     *
     * @return string
     */
    public function getBillableMode()
    {
        return $this->container['billable_mode'];
    }

    /**
     * Sets billable_mode
     *
     * @param string $billable_mode Whether this item should be refundable (yes) or not (no) or if it should be calculated by inherited settings from customer, project and activity (auto).
     *
     * @return $this
     */
    public function setBillableMode($billable_mode)
    {
        $allowedValues = $this->getBillableModeAllowableValues();
        if (!in_array($billable_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'billable_mode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['billable_mode'] = $billable_mode;

        return $this;
    }

    /**
     * Gets exported
     *
     * @return bool
     */
    public function getExported()
    {
        return $this->container['exported'];
    }

    /**
     * Sets exported
     *
     * @param bool $exported exported
     *
     * @return $this
     */
    public function setExported($exported)
    {
        $this->container['exported'] = $exported;

        return $this;
    }

    /**
     * Gets begin
     *
     * @return \DateTime
     */
    public function getBegin()
    {
        return $this->container['begin'];
    }

    /**
     * Sets begin
     *
     * @param \DateTime $begin begin
     *
     * @return $this
     */
    public function setBegin($begin)
    {
        $this->container['begin'] = $begin;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
