<?php
/**
 * UserEditForm
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kimai - API Docs
 *
 * JSON API for the Kimai time-tracking software: [API documentation](https://www.kimai.org/documentation/rest-api.html), [Swagger definition file](doc.json)
 *
 * OpenAPI spec version: 0.7
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.46
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UserEditForm Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserEditForm implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UserEditForm';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'alias' => 'string',
        'title' => 'string',
        'account_number' => 'string',
        'color' => 'string',
        'email' => 'string',
        'language' => 'string',
        'timezone' => 'string',
        'roles' => 'string[]',
        'enabled' => 'bool',
        'system_account' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'alias' => null,
        'title' => null,
        'account_number' => null,
        'color' => null,
        'email' => null,
        'language' => null,
        'timezone' => null,
        'roles' => null,
        'enabled' => null,
        'system_account' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'alias' => 'alias',
        'title' => 'title',
        'account_number' => 'accountNumber',
        'color' => 'color',
        'email' => 'email',
        'language' => 'language',
        'timezone' => 'timezone',
        'roles' => 'roles',
        'enabled' => 'enabled',
        'system_account' => 'systemAccount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'alias' => 'setAlias',
        'title' => 'setTitle',
        'account_number' => 'setAccountNumber',
        'color' => 'setColor',
        'email' => 'setEmail',
        'language' => 'setLanguage',
        'timezone' => 'setTimezone',
        'roles' => 'setRoles',
        'enabled' => 'setEnabled',
        'system_account' => 'setSystemAccount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'alias' => 'getAlias',
        'title' => 'getTitle',
        'account_number' => 'getAccountNumber',
        'color' => 'getColor',
        'email' => 'getEmail',
        'language' => 'getLanguage',
        'timezone' => 'getTimezone',
        'roles' => 'getRoles',
        'enabled' => 'getEnabled',
        'system_account' => 'getSystemAccount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const LANGUAGE_AR = 'ar';
    const LANGUAGE_CS = 'cs';
    const LANGUAGE_CS_CZ = 'cs_CZ';
    const LANGUAGE_DA = 'da';
    const LANGUAGE_DA_DK = 'da_DK';
    const LANGUAGE_DA_GL = 'da_GL';
    const LANGUAGE_DE = 'de';
    const LANGUAGE_DE_AT = 'de_AT';
    const LANGUAGE_DE_BE = 'de_BE';
    const LANGUAGE_DE_CH = 'de_CH';
    const LANGUAGE_DE_DE = 'de_DE';
    const LANGUAGE_DE_IT = 'de_IT';
    const LANGUAGE_DE_LI = 'de_LI';
    const LANGUAGE_DE_LU = 'de_LU';
    const LANGUAGE_EL = 'el';
    const LANGUAGE_EL_CY = 'el_CY';
    const LANGUAGE_EL_GR = 'el_GR';
    const LANGUAGE_EN = 'en';
    const LANGUAGE_EN_AE = 'en_AE';
    const LANGUAGE_EN_AG = 'en_AG';
    const LANGUAGE_EN_AI = 'en_AI';
    const LANGUAGE_EN_AS = 'en_AS';
    const LANGUAGE_EN_AT = 'en_AT';
    const LANGUAGE_EN_AU = 'en_AU';
    const LANGUAGE_EN_BB = 'en_BB';
    const LANGUAGE_EN_BE = 'en_BE';
    const LANGUAGE_EN_BI = 'en_BI';
    const LANGUAGE_EN_BM = 'en_BM';
    const LANGUAGE_EN_BS = 'en_BS';
    const LANGUAGE_EN_BW = 'en_BW';
    const LANGUAGE_EN_BZ = 'en_BZ';
    const LANGUAGE_EN_CA = 'en_CA';
    const LANGUAGE_EN_CC = 'en_CC';
    const LANGUAGE_EN_CH = 'en_CH';
    const LANGUAGE_EN_CK = 'en_CK';
    const LANGUAGE_EN_CM = 'en_CM';
    const LANGUAGE_EN_CX = 'en_CX';
    const LANGUAGE_EN_CY = 'en_CY';
    const LANGUAGE_EN_DE = 'en_DE';
    const LANGUAGE_EN_DK = 'en_DK';
    const LANGUAGE_EN_DM = 'en_DM';
    const LANGUAGE_EN_ER = 'en_ER';
    const LANGUAGE_EN_FI = 'en_FI';
    const LANGUAGE_EN_FJ = 'en_FJ';
    const LANGUAGE_EN_FK = 'en_FK';
    const LANGUAGE_EN_FM = 'en_FM';
    const LANGUAGE_EN_GB = 'en_GB';
    const LANGUAGE_EN_GD = 'en_GD';
    const LANGUAGE_EN_GG = 'en_GG';
    const LANGUAGE_EN_GH = 'en_GH';
    const LANGUAGE_EN_GI = 'en_GI';
    const LANGUAGE_EN_GM = 'en_GM';
    const LANGUAGE_EN_GU = 'en_GU';
    const LANGUAGE_EN_GY = 'en_GY';
    const LANGUAGE_EN_HK = 'en_HK';
    const LANGUAGE_EN_IE = 'en_IE';
    const LANGUAGE_EN_IL = 'en_IL';
    const LANGUAGE_EN_IM = 'en_IM';
    const LANGUAGE_EN_IN = 'en_IN';
    const LANGUAGE_EN_IO = 'en_IO';
    const LANGUAGE_EN_JE = 'en_JE';
    const LANGUAGE_EN_JM = 'en_JM';
    const LANGUAGE_EN_KE = 'en_KE';
    const LANGUAGE_EN_KI = 'en_KI';
    const LANGUAGE_EN_KN = 'en_KN';
    const LANGUAGE_EN_KY = 'en_KY';
    const LANGUAGE_EN_LC = 'en_LC';
    const LANGUAGE_EN_LR = 'en_LR';
    const LANGUAGE_EN_LS = 'en_LS';
    const LANGUAGE_EN_MG = 'en_MG';
    const LANGUAGE_EN_MH = 'en_MH';
    const LANGUAGE_EN_MO = 'en_MO';
    const LANGUAGE_EN_MP = 'en_MP';
    const LANGUAGE_EN_MS = 'en_MS';
    const LANGUAGE_EN_MT = 'en_MT';
    const LANGUAGE_EN_MU = 'en_MU';
    const LANGUAGE_EN_MV = 'en_MV';
    const LANGUAGE_EN_MW = 'en_MW';
    const LANGUAGE_EN_MY = 'en_MY';
    const LANGUAGE_EN_NA = 'en_NA';
    const LANGUAGE_EN_NF = 'en_NF';
    const LANGUAGE_EN_NG = 'en_NG';
    const LANGUAGE_EN_NL = 'en_NL';
    const LANGUAGE_EN_NR = 'en_NR';
    const LANGUAGE_EN_NU = 'en_NU';
    const LANGUAGE_EN_NZ = 'en_NZ';
    const LANGUAGE_EN_PG = 'en_PG';
    const LANGUAGE_EN_PH = 'en_PH';
    const LANGUAGE_EN_PK = 'en_PK';
    const LANGUAGE_EN_PN = 'en_PN';
    const LANGUAGE_EN_PR = 'en_PR';
    const LANGUAGE_EN_PW = 'en_PW';
    const LANGUAGE_EN_RW = 'en_RW';
    const LANGUAGE_EN_SB = 'en_SB';
    const LANGUAGE_EN_SC = 'en_SC';
    const LANGUAGE_EN_SD = 'en_SD';
    const LANGUAGE_EN_SE = 'en_SE';
    const LANGUAGE_EN_SG = 'en_SG';
    const LANGUAGE_EN_SH = 'en_SH';
    const LANGUAGE_EN_SI = 'en_SI';
    const LANGUAGE_EN_SL = 'en_SL';
    const LANGUAGE_EN_SS = 'en_SS';
    const LANGUAGE_EN_SX = 'en_SX';
    const LANGUAGE_EN_SZ = 'en_SZ';
    const LANGUAGE_EN_TC = 'en_TC';
    const LANGUAGE_EN_TK = 'en_TK';
    const LANGUAGE_EN_TO = 'en_TO';
    const LANGUAGE_EN_TT = 'en_TT';
    const LANGUAGE_EN_TV = 'en_TV';
    const LANGUAGE_EN_TZ = 'en_TZ';
    const LANGUAGE_EN_UG = 'en_UG';
    const LANGUAGE_EN_UM = 'en_UM';
    const LANGUAGE_EN_US = 'en_US';
    const LANGUAGE_EN_VC = 'en_VC';
    const LANGUAGE_EN_VG = 'en_VG';
    const LANGUAGE_EN_VI = 'en_VI';
    const LANGUAGE_EN_VU = 'en_VU';
    const LANGUAGE_EN_WS = 'en_WS';
    const LANGUAGE_EN_ZA = 'en_ZA';
    const LANGUAGE_EN_ZM = 'en_ZM';
    const LANGUAGE_EN_ZW = 'en_ZW';
    const LANGUAGE_EO = 'eo';
    const LANGUAGE_ES = 'es';
    const LANGUAGE_ES_AR = 'es_AR';
    const LANGUAGE_ES_BO = 'es_BO';
    const LANGUAGE_ES_BR = 'es_BR';
    const LANGUAGE_ES_BZ = 'es_BZ';
    const LANGUAGE_ES_CL = 'es_CL';
    const LANGUAGE_ES_CO = 'es_CO';
    const LANGUAGE_ES_CR = 'es_CR';
    const LANGUAGE_ES_CU = 'es_CU';
    const LANGUAGE_ES_DO = 'es_DO';
    const LANGUAGE_ES_EC = 'es_EC';
    const LANGUAGE_ES_ES = 'es_ES';
    const LANGUAGE_ES_GQ = 'es_GQ';
    const LANGUAGE_ES_GT = 'es_GT';
    const LANGUAGE_ES_HN = 'es_HN';
    const LANGUAGE_ES_MX = 'es_MX';
    const LANGUAGE_ES_NI = 'es_NI';
    const LANGUAGE_ES_PA = 'es_PA';
    const LANGUAGE_ES_PE = 'es_PE';
    const LANGUAGE_ES_PH = 'es_PH';
    const LANGUAGE_ES_PR = 'es_PR';
    const LANGUAGE_ES_PY = 'es_PY';
    const LANGUAGE_ES_SV = 'es_SV';
    const LANGUAGE_ES_US = 'es_US';
    const LANGUAGE_ES_UY = 'es_UY';
    const LANGUAGE_ES_VE = 'es_VE';
    const LANGUAGE_EU = 'eu';
    const LANGUAGE_EU_ES = 'eu_ES';
    const LANGUAGE_FA = 'fa';
    const LANGUAGE_FA_AF = 'fa_AF';
    const LANGUAGE_FA_IR = 'fa_IR';
    const LANGUAGE_FI = 'fi';
    const LANGUAGE_FI_FI = 'fi_FI';
    const LANGUAGE_FO = 'fo';
    const LANGUAGE_FO_DK = 'fo_DK';
    const LANGUAGE_FO_FO = 'fo_FO';
    const LANGUAGE_FR = 'fr';
    const LANGUAGE_FR_BE = 'fr_BE';
    const LANGUAGE_FR_BF = 'fr_BF';
    const LANGUAGE_FR_BI = 'fr_BI';
    const LANGUAGE_FR_BJ = 'fr_BJ';
    const LANGUAGE_FR_BL = 'fr_BL';
    const LANGUAGE_FR_CA = 'fr_CA';
    const LANGUAGE_FR_CD = 'fr_CD';
    const LANGUAGE_FR_CF = 'fr_CF';
    const LANGUAGE_FR_CG = 'fr_CG';
    const LANGUAGE_FR_CH = 'fr_CH';
    const LANGUAGE_FR_CI = 'fr_CI';
    const LANGUAGE_FR_CM = 'fr_CM';
    const LANGUAGE_FR_DJ = 'fr_DJ';
    const LANGUAGE_FR_DZ = 'fr_DZ';
    const LANGUAGE_FR_FR = 'fr_FR';
    const LANGUAGE_FR_GA = 'fr_GA';
    const LANGUAGE_FR_GF = 'fr_GF';
    const LANGUAGE_FR_GN = 'fr_GN';
    const LANGUAGE_FR_GP = 'fr_GP';
    const LANGUAGE_FR_GQ = 'fr_GQ';
    const LANGUAGE_FR_HT = 'fr_HT';
    const LANGUAGE_FR_KM = 'fr_KM';
    const LANGUAGE_FR_LU = 'fr_LU';
    const LANGUAGE_FR_MA = 'fr_MA';
    const LANGUAGE_FR_MC = 'fr_MC';
    const LANGUAGE_FR_MF = 'fr_MF';
    const LANGUAGE_FR_MG = 'fr_MG';
    const LANGUAGE_FR_ML = 'fr_ML';
    const LANGUAGE_FR_MQ = 'fr_MQ';
    const LANGUAGE_FR_MR = 'fr_MR';
    const LANGUAGE_FR_MU = 'fr_MU';
    const LANGUAGE_FR_NC = 'fr_NC';
    const LANGUAGE_FR_NE = 'fr_NE';
    const LANGUAGE_FR_PF = 'fr_PF';
    const LANGUAGE_FR_PM = 'fr_PM';
    const LANGUAGE_FR_RE = 'fr_RE';
    const LANGUAGE_FR_RW = 'fr_RW';
    const LANGUAGE_FR_SC = 'fr_SC';
    const LANGUAGE_FR_SN = 'fr_SN';
    const LANGUAGE_FR_SY = 'fr_SY';
    const LANGUAGE_FR_TD = 'fr_TD';
    const LANGUAGE_FR_TG = 'fr_TG';
    const LANGUAGE_FR_TN = 'fr_TN';
    const LANGUAGE_FR_VU = 'fr_VU';
    const LANGUAGE_FR_WF = 'fr_WF';
    const LANGUAGE_FR_YT = 'fr_YT';
    const LANGUAGE_HE = 'he';
    const LANGUAGE_HE_IL = 'he_IL';
    const LANGUAGE_HR = 'hr';
    const LANGUAGE_HR_BA = 'hr_BA';
    const LANGUAGE_HR_HR = 'hr_HR';
    const LANGUAGE_HU = 'hu';
    const LANGUAGE_HU_HU = 'hu_HU';
    const LANGUAGE_IT = 'it';
    const LANGUAGE_IT_CH = 'it_CH';
    const LANGUAGE_IT_IT = 'it_IT';
    const LANGUAGE_IT_SM = 'it_SM';
    const LANGUAGE_IT_VA = 'it_VA';
    const LANGUAGE_JA = 'ja';
    const LANGUAGE_JA_JP = 'ja_JP';
    const LANGUAGE_KO = 'ko';
    const LANGUAGE_KO_KP = 'ko_KP';
    const LANGUAGE_KO_KR = 'ko_KR';
    const LANGUAGE_NB_NO = 'nb_NO';
    const LANGUAGE_NL = 'nl';
    const LANGUAGE_NL_AW = 'nl_AW';
    const LANGUAGE_NL_BE = 'nl_BE';
    const LANGUAGE_NL_BQ = 'nl_BQ';
    const LANGUAGE_NL_CW = 'nl_CW';
    const LANGUAGE_NL_NL = 'nl_NL';
    const LANGUAGE_NL_SR = 'nl_SR';
    const LANGUAGE_NL_SX = 'nl_SX';
    const LANGUAGE_PL = 'pl';
    const LANGUAGE_PL_PL = 'pl_PL';
    const LANGUAGE_PT = 'pt';
    const LANGUAGE_PT_AO = 'pt_AO';
    const LANGUAGE_PT_BR = 'pt_BR';
    const LANGUAGE_PT_CH = 'pt_CH';
    const LANGUAGE_PT_CV = 'pt_CV';
    const LANGUAGE_PT_GQ = 'pt_GQ';
    const LANGUAGE_PT_GW = 'pt_GW';
    const LANGUAGE_PT_LU = 'pt_LU';
    const LANGUAGE_PT_MO = 'pt_MO';
    const LANGUAGE_PT_MZ = 'pt_MZ';
    const LANGUAGE_PT_PT = 'pt_PT';
    const LANGUAGE_PT_ST = 'pt_ST';
    const LANGUAGE_PT_TL = 'pt_TL';
    const LANGUAGE_RO = 'ro';
    const LANGUAGE_RO_MD = 'ro_MD';
    const LANGUAGE_RO_RO = 'ro_RO';
    const LANGUAGE_RU = 'ru';
    const LANGUAGE_RU_BY = 'ru_BY';
    const LANGUAGE_RU_KG = 'ru_KG';
    const LANGUAGE_RU_KZ = 'ru_KZ';
    const LANGUAGE_RU_MD = 'ru_MD';
    const LANGUAGE_RU_RU = 'ru_RU';
    const LANGUAGE_RU_UA = 'ru_UA';
    const LANGUAGE_SK = 'sk';
    const LANGUAGE_SK_SK = 'sk_SK';
    const LANGUAGE_SV = 'sv';
    const LANGUAGE_SV_AX = 'sv_AX';
    const LANGUAGE_SV_FI = 'sv_FI';
    const LANGUAGE_SV_SE = 'sv_SE';
    const LANGUAGE_TR = 'tr';
    const LANGUAGE_TR_CY = 'tr_CY';
    const LANGUAGE_TR_TR = 'tr_TR';
    const LANGUAGE_UK = 'uk';
    const LANGUAGE_VI = 'vi';
    const LANGUAGE_VI_VN = 'vi_VN';
    const LANGUAGE_ZH_CN = 'zh_CN';
    const LANGUAGE_ZH_HANT = 'zh_Hant';
    const ROLES_TEAMLEAD = 'ROLE_TEAMLEAD';
    const ROLES_ADMIN = 'ROLE_ADMIN';
    const ROLES_SUPER_ADMIN = 'ROLE_SUPER_ADMIN';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLanguageAllowableValues()
    {
        return [
            self::LANGUAGE_AR,
            self::LANGUAGE_CS,
            self::LANGUAGE_CS_CZ,
            self::LANGUAGE_DA,
            self::LANGUAGE_DA_DK,
            self::LANGUAGE_DA_GL,
            self::LANGUAGE_DE,
            self::LANGUAGE_DE_AT,
            self::LANGUAGE_DE_BE,
            self::LANGUAGE_DE_CH,
            self::LANGUAGE_DE_DE,
            self::LANGUAGE_DE_IT,
            self::LANGUAGE_DE_LI,
            self::LANGUAGE_DE_LU,
            self::LANGUAGE_EL,
            self::LANGUAGE_EL_CY,
            self::LANGUAGE_EL_GR,
            self::LANGUAGE_EN,
            self::LANGUAGE_EN_AE,
            self::LANGUAGE_EN_AG,
            self::LANGUAGE_EN_AI,
            self::LANGUAGE_EN_AS,
            self::LANGUAGE_EN_AT,
            self::LANGUAGE_EN_AU,
            self::LANGUAGE_EN_BB,
            self::LANGUAGE_EN_BE,
            self::LANGUAGE_EN_BI,
            self::LANGUAGE_EN_BM,
            self::LANGUAGE_EN_BS,
            self::LANGUAGE_EN_BW,
            self::LANGUAGE_EN_BZ,
            self::LANGUAGE_EN_CA,
            self::LANGUAGE_EN_CC,
            self::LANGUAGE_EN_CH,
            self::LANGUAGE_EN_CK,
            self::LANGUAGE_EN_CM,
            self::LANGUAGE_EN_CX,
            self::LANGUAGE_EN_CY,
            self::LANGUAGE_EN_DE,
            self::LANGUAGE_EN_DK,
            self::LANGUAGE_EN_DM,
            self::LANGUAGE_EN_ER,
            self::LANGUAGE_EN_FI,
            self::LANGUAGE_EN_FJ,
            self::LANGUAGE_EN_FK,
            self::LANGUAGE_EN_FM,
            self::LANGUAGE_EN_GB,
            self::LANGUAGE_EN_GD,
            self::LANGUAGE_EN_GG,
            self::LANGUAGE_EN_GH,
            self::LANGUAGE_EN_GI,
            self::LANGUAGE_EN_GM,
            self::LANGUAGE_EN_GU,
            self::LANGUAGE_EN_GY,
            self::LANGUAGE_EN_HK,
            self::LANGUAGE_EN_IE,
            self::LANGUAGE_EN_IL,
            self::LANGUAGE_EN_IM,
            self::LANGUAGE_EN_IN,
            self::LANGUAGE_EN_IO,
            self::LANGUAGE_EN_JE,
            self::LANGUAGE_EN_JM,
            self::LANGUAGE_EN_KE,
            self::LANGUAGE_EN_KI,
            self::LANGUAGE_EN_KN,
            self::LANGUAGE_EN_KY,
            self::LANGUAGE_EN_LC,
            self::LANGUAGE_EN_LR,
            self::LANGUAGE_EN_LS,
            self::LANGUAGE_EN_MG,
            self::LANGUAGE_EN_MH,
            self::LANGUAGE_EN_MO,
            self::LANGUAGE_EN_MP,
            self::LANGUAGE_EN_MS,
            self::LANGUAGE_EN_MT,
            self::LANGUAGE_EN_MU,
            self::LANGUAGE_EN_MV,
            self::LANGUAGE_EN_MW,
            self::LANGUAGE_EN_MY,
            self::LANGUAGE_EN_NA,
            self::LANGUAGE_EN_NF,
            self::LANGUAGE_EN_NG,
            self::LANGUAGE_EN_NL,
            self::LANGUAGE_EN_NR,
            self::LANGUAGE_EN_NU,
            self::LANGUAGE_EN_NZ,
            self::LANGUAGE_EN_PG,
            self::LANGUAGE_EN_PH,
            self::LANGUAGE_EN_PK,
            self::LANGUAGE_EN_PN,
            self::LANGUAGE_EN_PR,
            self::LANGUAGE_EN_PW,
            self::LANGUAGE_EN_RW,
            self::LANGUAGE_EN_SB,
            self::LANGUAGE_EN_SC,
            self::LANGUAGE_EN_SD,
            self::LANGUAGE_EN_SE,
            self::LANGUAGE_EN_SG,
            self::LANGUAGE_EN_SH,
            self::LANGUAGE_EN_SI,
            self::LANGUAGE_EN_SL,
            self::LANGUAGE_EN_SS,
            self::LANGUAGE_EN_SX,
            self::LANGUAGE_EN_SZ,
            self::LANGUAGE_EN_TC,
            self::LANGUAGE_EN_TK,
            self::LANGUAGE_EN_TO,
            self::LANGUAGE_EN_TT,
            self::LANGUAGE_EN_TV,
            self::LANGUAGE_EN_TZ,
            self::LANGUAGE_EN_UG,
            self::LANGUAGE_EN_UM,
            self::LANGUAGE_EN_US,
            self::LANGUAGE_EN_VC,
            self::LANGUAGE_EN_VG,
            self::LANGUAGE_EN_VI,
            self::LANGUAGE_EN_VU,
            self::LANGUAGE_EN_WS,
            self::LANGUAGE_EN_ZA,
            self::LANGUAGE_EN_ZM,
            self::LANGUAGE_EN_ZW,
            self::LANGUAGE_EO,
            self::LANGUAGE_ES,
            self::LANGUAGE_ES_AR,
            self::LANGUAGE_ES_BO,
            self::LANGUAGE_ES_BR,
            self::LANGUAGE_ES_BZ,
            self::LANGUAGE_ES_CL,
            self::LANGUAGE_ES_CO,
            self::LANGUAGE_ES_CR,
            self::LANGUAGE_ES_CU,
            self::LANGUAGE_ES_DO,
            self::LANGUAGE_ES_EC,
            self::LANGUAGE_ES_ES,
            self::LANGUAGE_ES_GQ,
            self::LANGUAGE_ES_GT,
            self::LANGUAGE_ES_HN,
            self::LANGUAGE_ES_MX,
            self::LANGUAGE_ES_NI,
            self::LANGUAGE_ES_PA,
            self::LANGUAGE_ES_PE,
            self::LANGUAGE_ES_PH,
            self::LANGUAGE_ES_PR,
            self::LANGUAGE_ES_PY,
            self::LANGUAGE_ES_SV,
            self::LANGUAGE_ES_US,
            self::LANGUAGE_ES_UY,
            self::LANGUAGE_ES_VE,
            self::LANGUAGE_EU,
            self::LANGUAGE_EU_ES,
            self::LANGUAGE_FA,
            self::LANGUAGE_FA_AF,
            self::LANGUAGE_FA_IR,
            self::LANGUAGE_FI,
            self::LANGUAGE_FI_FI,
            self::LANGUAGE_FO,
            self::LANGUAGE_FO_DK,
            self::LANGUAGE_FO_FO,
            self::LANGUAGE_FR,
            self::LANGUAGE_FR_BE,
            self::LANGUAGE_FR_BF,
            self::LANGUAGE_FR_BI,
            self::LANGUAGE_FR_BJ,
            self::LANGUAGE_FR_BL,
            self::LANGUAGE_FR_CA,
            self::LANGUAGE_FR_CD,
            self::LANGUAGE_FR_CF,
            self::LANGUAGE_FR_CG,
            self::LANGUAGE_FR_CH,
            self::LANGUAGE_FR_CI,
            self::LANGUAGE_FR_CM,
            self::LANGUAGE_FR_DJ,
            self::LANGUAGE_FR_DZ,
            self::LANGUAGE_FR_FR,
            self::LANGUAGE_FR_GA,
            self::LANGUAGE_FR_GF,
            self::LANGUAGE_FR_GN,
            self::LANGUAGE_FR_GP,
            self::LANGUAGE_FR_GQ,
            self::LANGUAGE_FR_HT,
            self::LANGUAGE_FR_KM,
            self::LANGUAGE_FR_LU,
            self::LANGUAGE_FR_MA,
            self::LANGUAGE_FR_MC,
            self::LANGUAGE_FR_MF,
            self::LANGUAGE_FR_MG,
            self::LANGUAGE_FR_ML,
            self::LANGUAGE_FR_MQ,
            self::LANGUAGE_FR_MR,
            self::LANGUAGE_FR_MU,
            self::LANGUAGE_FR_NC,
            self::LANGUAGE_FR_NE,
            self::LANGUAGE_FR_PF,
            self::LANGUAGE_FR_PM,
            self::LANGUAGE_FR_RE,
            self::LANGUAGE_FR_RW,
            self::LANGUAGE_FR_SC,
            self::LANGUAGE_FR_SN,
            self::LANGUAGE_FR_SY,
            self::LANGUAGE_FR_TD,
            self::LANGUAGE_FR_TG,
            self::LANGUAGE_FR_TN,
            self::LANGUAGE_FR_VU,
            self::LANGUAGE_FR_WF,
            self::LANGUAGE_FR_YT,
            self::LANGUAGE_HE,
            self::LANGUAGE_HE_IL,
            self::LANGUAGE_HR,
            self::LANGUAGE_HR_BA,
            self::LANGUAGE_HR_HR,
            self::LANGUAGE_HU,
            self::LANGUAGE_HU_HU,
            self::LANGUAGE_IT,
            self::LANGUAGE_IT_CH,
            self::LANGUAGE_IT_IT,
            self::LANGUAGE_IT_SM,
            self::LANGUAGE_IT_VA,
            self::LANGUAGE_JA,
            self::LANGUAGE_JA_JP,
            self::LANGUAGE_KO,
            self::LANGUAGE_KO_KP,
            self::LANGUAGE_KO_KR,
            self::LANGUAGE_NB_NO,
            self::LANGUAGE_NL,
            self::LANGUAGE_NL_AW,
            self::LANGUAGE_NL_BE,
            self::LANGUAGE_NL_BQ,
            self::LANGUAGE_NL_CW,
            self::LANGUAGE_NL_NL,
            self::LANGUAGE_NL_SR,
            self::LANGUAGE_NL_SX,
            self::LANGUAGE_PL,
            self::LANGUAGE_PL_PL,
            self::LANGUAGE_PT,
            self::LANGUAGE_PT_AO,
            self::LANGUAGE_PT_BR,
            self::LANGUAGE_PT_CH,
            self::LANGUAGE_PT_CV,
            self::LANGUAGE_PT_GQ,
            self::LANGUAGE_PT_GW,
            self::LANGUAGE_PT_LU,
            self::LANGUAGE_PT_MO,
            self::LANGUAGE_PT_MZ,
            self::LANGUAGE_PT_PT,
            self::LANGUAGE_PT_ST,
            self::LANGUAGE_PT_TL,
            self::LANGUAGE_RO,
            self::LANGUAGE_RO_MD,
            self::LANGUAGE_RO_RO,
            self::LANGUAGE_RU,
            self::LANGUAGE_RU_BY,
            self::LANGUAGE_RU_KG,
            self::LANGUAGE_RU_KZ,
            self::LANGUAGE_RU_MD,
            self::LANGUAGE_RU_RU,
            self::LANGUAGE_RU_UA,
            self::LANGUAGE_SK,
            self::LANGUAGE_SK_SK,
            self::LANGUAGE_SV,
            self::LANGUAGE_SV_AX,
            self::LANGUAGE_SV_FI,
            self::LANGUAGE_SV_SE,
            self::LANGUAGE_TR,
            self::LANGUAGE_TR_CY,
            self::LANGUAGE_TR_TR,
            self::LANGUAGE_UK,
            self::LANGUAGE_VI,
            self::LANGUAGE_VI_VN,
            self::LANGUAGE_ZH_CN,
            self::LANGUAGE_ZH_HANT,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRolesAllowableValues()
    {
        return [
            self::ROLES_TEAMLEAD,
            self::ROLES_ADMIN,
            self::ROLES_SUPER_ADMIN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['alias'] = isset($data['alias']) ? $data['alias'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['account_number'] = isset($data['account_number']) ? $data['account_number'] : null;
        $this->container['color'] = isset($data['color']) ? $data['color'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['timezone'] = isset($data['timezone']) ? $data['timezone'] : null;
        $this->container['roles'] = isset($data['roles']) ? $data['roles'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['system_account'] = isset($data['system_account']) ? $data['system_account'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ($this->container['language'] === null) {
            $invalidProperties[] = "'language' can't be null";
        }
        $allowedValues = $this->getLanguageAllowableValues();
        if (!is_null($this->container['language']) && !in_array($this->container['language'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'language', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['timezone'] === null) {
            $invalidProperties[] = "'timezone' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets alias
     *
     * @return string
     */
    public function getAlias()
    {
        return $this->container['alias'];
    }

    /**
     * Sets alias
     *
     * @param string $alias alias
     *
     * @return $this
     */
    public function setAlias($alias)
    {
        $this->container['alias'] = $alias;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return string
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string $account_number account_number
     *
     * @return $this
     */
    public function setAccountNumber($account_number)
    {
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string $color The hexadecimal color code (default: #d2d6de)
     *
     * @return $this
     */
    public function setColor($color)
    {
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string $language language
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $allowedValues = $this->getLanguageAllowableValues();
        if (!in_array($language, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'language', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string $timezone timezone
     *
     * @return $this
     */
    public function setTimezone($timezone)
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets roles
     *
     * @return string[]
     */
    public function getRoles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     *
     * @param string[] $roles roles
     *
     * @return $this
     */
    public function setRoles($roles)
    {
        $allowedValues = $this->getRolesAllowableValues();
        if (!is_null($roles) && array_diff($roles, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'roles', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['roles'] = $roles;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled enabled
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets system_account
     *
     * @return bool
     */
    public function getSystemAccount()
    {
        return $this->container['system_account'];
    }

    /**
     * Sets system_account
     *
     * @param bool $system_account system_account
     *
     * @return $this
     */
    public function setSystemAccount($system_account)
    {
        $this->container['system_account'] = $system_account;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
